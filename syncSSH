#!/bin/sh
################################################
#
# syncSSH
# 
# Version: 0.0.5 (2012AUG22)
################################################

# Setup script variables
APP_VERSION="0.0.5"
APP_NAME="syncSSH"
APP_DATE="2012AUG22"
APP_DESC="A wrapper script for using rsync over ssh."

# Usage Information
APP_USAGE="$(basename $0) $APP_VERSION $APP_DESC
Usage:
    -h,--help                       Alias of usage (-u, --usage)
    
    -H,--remote-host [user@]host    IP or DNS name of the ssh remote host.
                                        *NOT IMPLIMENTED*
                                        
    -k,--keyfile keyfile            Path to the key file to use for
                                    authentication.
                                    (default: $HOME/.ssh/id_rsa)
                                        
    -l,--local-path localpath       Local path, source path for syncing.
                                    (default: current directory)
                                        
    -p,--port port                  SSH port to use.
                                        
    -q,--quiet                      Run quietly with no output.
    
    -r,--remote-path remotepath     Remote path, destination path on
                                    remote host for syncing.
                                        *NOT IMPLIMENTED*
                                        
    -u,--usage                      Display the help/usage information.
    
    -v,--verbose                    Verbose mode.  Causes script to print
                                    debugging messages about its progress.
                                    This is helpful in debugging connection,
                                    authentication, and configuration problems.
                                    Multiple -v options increase the verbosity.
                                    The maximum is 3.
                                    
    -V,--version                    Display the version number and exit."

while [ $# -gt 0 ]
do
    case "$1" in
        -H | --remote-host)
            # remote host
            
            ;;
            
    	-k | --keyfile)
    	    # keyfile
    	    # check to make sure the provided argument is a valid keyfile.
    	    if [ -f "$2" ]
    	    then
    	        KEYFILE="$2"
    	        shift
    	    else
    	        APP_PARAM_ERROR="$2 is not a file."
    	        break
    	    fi
    	    ;;
    	    
        -l | --local-path)
            # local path
            # check to make sure the provided argument is a valid keyfile.
            if [ -d "$2" ]
            then
                LOCAL_PATH="$2"
                shift
            else
                APP_PARAM_ERROR="$2 is not a valid local path."
                break
            fi
            ;;
    	    
        -p | --port)
            # SSH port
            # make a port is provided and that it is a number between 1-65535
            if ! [ "$2" -eq 0 -o "$2" -ne 0 2>/dev/null ]
            then
                APP_PARAM_ERROR="You must provide the port number with -p."
                break
            elif [ "$2" -lt 1 -o "$2" -gt 65535 ]
            then
                APP_PARAM_ERROR="Invalid port, $2, it must be between 1 and 65535."
                break
            else
                SSH_PORT=" -p$2 "
                shift
            fi
            ;;
    	
    	-q | --quiet)
        	# quiet mode
        	APP_QUIET=">& /dev/null"
        	;;
    	
    	-r | --remote-path)
            # remote path
        
            ;;
    
    	-u | -h | --usage | --help)
            # usage
            echo "$APP_USAGE"
            exit
            ;;
        
    	-vv* | --verbose)
    		# verbose
    		APP_VERBOSE=$1 
    		;;
    		
    	-V | --version)
    		# version
    		echo "$APP_NAME v$APP_VERSION ($APP_DATE)"
    		exit
    		;;

    	*)
    		# unknown variable
    		if [ -n "$APP_PARAM_ERROR" ]
    		then
    			APP_PARAM_ERROR="$APP_PARAM_ERROR, $1"
    		else
    			APP_PARAM_ERROR="Unknown Parameter(s): $1"
    		fi
    		;;	
    
    esac
        shift
done


# Check for errors in parameters
if [ -n "$APP_PARAM_ERROR" ]
then
	printf '\a'
	echo "$APP_NAME ($APP_VERSION): ABORTED\n$APP_PARAM_ERROR"
	exit
fi

# Setup Keyfile
if [ -z "$KEYFILE"]
then
    KEYFILE="$HOME/.ssh/id_rsa"
fi

#KEYFILE="/home/jpscharf/keys/rsync-svn-serenity"

# Setup Local Path
if [ -z "$LOCAL_PATH"]
then
    LOCAL_PATH=${PWD}
fi

# Setup remote path
REMOTE_PATH="/volume1/NetBackup/svn/"

# Setup SSH Host
SSH_HOST="jasonscharf.org"

# Setup ssh command
SSH_COM="ssh $APP_VERBOSE$SSH_PORT -oPreferredAuthentications=publickey -i $KEYFILE"

# Setup rsync command
RSYNC_COM="rsync -azl $APP_VERBOSE -e \"$SSH_COM\" $SSH_HOST:$REMOTE_PATH $LOCAL_PATH"

if [ "$APP_QUIET" = "" ]
then

	echo "################################################"
	echo $APP_VERSION $APP_NAME
	echo "################################################"

	echo "Keyfile Setup:\n $KEYFILE"
	echo "Local path configured:\n $LOCAL_PATH"
	echo "Remote path configure:\n $REMOTE_PATH"
	echo "SSH host configured:\n $SSH_HOST"
	echo "SSH command generated:\n $SSH_COM"
	echo "rsync command generated:\n $RSYNC_COM"
	echo "Running...."
fi

# Run rsync
# eval $RSYNC_COM $APP_QUIET

# wrap up
# exit $?

#rsync -azlvvv -e $SSHCOM:/volume1/NetBackup/svn/ /home/jpscharf/svn_backups
#rsync -azlvvv -e $SSHCOM $SSHHOST:$REMOTE_PATH $LOCAL_PATH

# ssh -vvv -oPreferredAuthentications=publickey root@192.168
#  
#rsync -azl -e "ssh -p7822" /home/jpscharf/svn_backups/ root@jasonscharf.org:/volume1/NetBackup/svn/
#rsync -azlvvv -e "ssh -vvvv -p7822 -i /home/jpscharf/keys/rsync-svn-serenity" 
#jasonscharf.org:/volume1/NetBackup/svn/ /home/jpscharf/svn_backups/

#!/bin/sh
################################################
#
# syncSSH
# 
# Version: 0.0.6 (2012AUG22)
################################################

# Setup script variables
APP_VERSION="0.0.6"
APP_NAME="syncSSH"
APP_DATE="2012AUG22"
APP_DESC="A wrapper script for using rsync over ssh."

# Usage Information
APP_USAGE="$(basename $0) $APP_VERSION $APP_DESC
Usage:
    -h,--help                       Alias of usage (-u, --usage)
    
    -H,--remote-host [user@]host    IP or DNS name of the ssh remote host.
                                        *REQUIRED*
                                        
    -k,--keyfile keyfile            Path to the key file to use for
                                    authentication.
                                    (default: $HOME/.ssh/id_rsa)
                                        
    -l,--local-path localpath       Local path, source path for syncing.
                                    (default: current directory)
                                    
    -L,--log-file logfile           Location to save a log of the results.
                                    (default: .\syncSSH.log)
                                        
    -p,--port port                  SSH port to use.
                                        
    -q,--quiet                      Run quietly with no output.
    
    -r,--remote-path remotepath     Remote path, destination path on
                                    remote host for syncing.
                                        *REQUIRED*
                                        
    -u,--usage                      Display the help/usage information.
    
    -v,--verbose                    Verbose mode.  Causes script to print
                                    debugging messages about its progress.
                                    This is helpful in debugging connection,
                                    authentication, and configuration problems.
                                    Multiple -v options increase the verbosity.
                                    The maximum is 3.
                                    
    -V,--version                    Display the version number and exit."

while [ $# -gt 0 ]
do
    case "$1" in
        -H | --remote-host)
            # remote host
            # extract host
            SSH_HOST=`expr "$2" : "\(^[^\.\-][a-zA-Z0-9_@\.\-]*\)"`
            if [ -z "$SSH_HOST" ]
            then
    	        break
    	    else
                shift
    	    fi
            ;;
            
    	-k | --keyfile)
    	    # keyfile
    	    # check to make sure the provided argument is a valid keyfile.
    	    if [ -f "$2" ]
    	    then
    	        KEYFILE="$2"
    	        shift
    	    else
    	        APP_PARAM_ERROR="$2 is not a file."
    	        break
    	    fi
    	    ;;
    	    
        -l | --local-path)
            # local path
            # check to make sure the provided argument is a valid keyfile.
            if [ -d "$2" ]
            then
                LOCAL_PATH="$2"
                shift
            else
                APP_PARAM_ERROR="$2 is not a valid local path."
                break
            fi
            ;;
        
        -L | --log-file)
            # log file
            # check to see if a logfile is provided
            # set RAW_LOG_FILE
            RAW_LOG_FILE=$2
            CLEAN_LOG_FILE=`expr "$RAW_LOG_FILE" : "\(^[^-][^\\:/]*\)"`
            
            # Full path to file
            if [ -f "$2" ]
            then
                LOG_FILE="$2"
                shift
            # Directory
            elif [ -d "$2" ]
            then
                LOG_FILE="$2/syncSSH.log"
                shift
            # Create provided filename in the working directory
            elif [ ${#RAW_LOG_FILE} = ${#CLEAN_LOG_FILE} ]
            then
                LOG_FILE=$CLEAN_LOG_FILE
                shift
            # invalid logfile
            elif [ ${#RAW_LOG_FILE} != ${#CLEAN_LOG_FILE} ]
            then
                APP_PARAM_ERROR="Invalid log file."
                break
            else
                LOG_FILE="syncSSH.log"
            fi
            #create LOG_FILE_COM
                LOG_FILE_COM=" >> $LOG_FILE"
            ;;
    	    
        -p | --port)
            # SSH port
            # make a port is provided and that it is a number between 1-65535
            if ! [ "$2" -eq 0 -o "$2" -ne 0 2>/dev/null ]
            then
                APP_PARAM_ERROR="You must provide the port number with -p."
                break
            elif [ "$2" -lt 1 -o "$2" -gt 65535 ]
            then
                APP_PARAM_ERROR="Invalid port, $2, it must be between 1 and 65535."
                break
            else
                SSH_PORT=" -p$2"
                shift
            fi
            ;;
    	
    	-q | --quiet)
        	# quiet mode
        	APP_QUIET=">& /dev/null"
        	;;
    	
    	-r | --remote-path)
            # remote path
            if [ -z "$2" ]
            then
                break
            else
                REMOTE_PATH="$2"
                shift
            fi
            ;;
            
    	-u | -h | --usage | --help)
            # usage
            printf "$APP_USAGE"
            exit
            ;;
        
    	-vv* | --verbose)
    		# verbose
    		APP_VERBOSE=$1 
    		;;
    		
    	-V | --version)
    		# version
    		printf "$APP_NAME v$APP_VERSION ($APP_DATE)"
    		exit
    		;;

    	*)
    		# unknown variable
    		if [ -n "$APP_PARAM_ERROR" ]
    		then
    			APP_PARAM_ERROR="$APP_PARAM_ERROR, $1"
    		else
    			APP_PARAM_ERROR="Unknown Parameter(s): $1"
    		fi
    		;;	
    
    esac
        shift
done

# Setup Keyfile
#if [ -z "$KEYFILE" && -f "$HOME/.ssh/id_rsa" ]
#then
#    KEYFILE="$HOME/.ssh/id_rsa"
#elif [ -z "$KEYFILE" ]
#then
#    if [ -n "$APP_PARAM_ERROR" ]
#	then
#		APP_PARAM_ERROR="$APP_PARAM_ERROR\nDefault keyfile (~/.ssh/id_rsa) could not be found and a key was not provided (-k,--keyfile keyfile)."
#	else
#		APP_PARAM_ERROR="Default keyfile (~/.ssh/id_rsa) could not be found and a key was not provided (-k,--keyfile keyfile)."
#	fi
#fi

#KEYFILE="/home/jpscharf/keys/rsync-svn-serenity"

# Setup Local Path
if [ -z "$LOCAL_PATH"]
then
    LOCAL_PATH=${PWD}
fi

# Setup remote path
if [ -z "$REMOTE_PATH" ]
then
    if [ -n "$APP_PARAM_ERROR" ]
	then
		APP_PARAM_ERROR="$APP_PARAM_ERROR\nRemote path is a required parameter (-r,--remote-path remotepath)."
	else
		APP_PARAM_ERROR="Remote path is a required parameter (-r,--remote-path remotepath)."
	fi
fi

# Check SSH Host
if [ -z "$SSH_HOST" ]
then
    if [ -n "$APP_PARAM_ERROR" ]
	then
		APP_PARAM_ERROR="$APP_PARAM_ERROR\nRemote host is a required parameter (-H,--remote-host [user@]host)."
	else
		APP_PARAM_ERROR="Remote host is a required parameter (-H,--remote-host [user@]host)."
	fi
fi

# Setup ssh command
#check for keyfile
if [ -n "$KEYFILE" ]
then
    SSH_COM="ssh $APP_VERBOSE$SSH_PORT -oPreferredAuthentications=publickey -i $KEYFILE"
else
    SSH_COM="ssh $APP_VERBOSE$SSH_PORT"     
fi

# Setup rsync command
RSYNC_COM="rsync -azl $APP_VERBOSE -e \"$SSH_COM\" \"$LOCAL_PATH\" $SSH_HOST:\"$REMOTE_PATH\""

# Check for errors in parameters
if [ -n "$APP_PARAM_ERROR" ]
then
	printf '\a'
	printf "$APP_NAME ($APP_VERSION): ABORTED\n$APP_PARAM_ERROR"
	echo "\nFor help, please try, $(basename $0) -u."
	exit
fi

if [ -z "$APP_QUIET" ]
then

	printf "################################################"
	printf $APP_VERSION $APP_NAME
	printf "################################################"
    
    if [ -n "$KEYFILE" ]
    then
	    printf "Keyfile Setup:\n $KEYFILE"
	fi
	printf "Local path configured:\n $LOCAL_PATH"
	if [ -n "$LOG_FILE" ]
    then
	    printf "Logfile:\n $LOG_FILE"
	fi
	printf "Remote path configure:\n $REMOTE_PATH"
	printf "SSH host configured:\n $SSH_HOST"
	printf "SSH command generated:\n $SSH_COM"
	printf "rsync command generated:\n [$RSYNC_COM]"
	printf "Running...."
fi

# Run rsync
# printf "$RSYNC_COM $APP_QUIET$LOG_FILE_COM"
eval "$RSYNC_COM $APP_QUIET$LOG_FILE_COM"